{
    let n = "https://api.abti.store", i = (window.abtiClient = window.abtiClient || {}, 
    abtiClient.initQueue && r(abtiClient.initQueue).then(() => {
        a();
    }), abtiClient.initializeAbti = async (...t) => {
        abtiClient.initQueue = abtiClient.initQueue || t, await r(abtiClient.initQueue), 
        a();
    }, window.addEventListener("popstate", a), window.addEventListener("click", async function(t) {
        let i = o();
        if (i && t.target.id === i.targetElementId && t.target.classList.contains(i.targetElementId)) {
            t = i;
            t = i.testId;
            try {
                await s(t, {
                    type: "conversion",
                    value: 1
                });
            } catch (t) {
                console.error("전환 이벤트 추적 과정 중 에러가 발생하였습니다.", t);
            }
        }
    }), history.pushState), e = history.replaceState;
    async function a() {
        var t = o();
        if (t) {
            var i = t;
            i = t.testId;
            try {
                await s(i, {
                    type: "visitation",
                    value: 1
                });
            } catch (t) {
                console.error("페이지 방문 통계 수집 과정 중 에러가 발생하였습니다.", t);
            }
        }
    }
    function o() {
        var t = abtiClient.testConfiguration;
        let {
            origin: e,
            pathname: n
        } = window.location;
        var i = t.findIndex(t => {
            var {
                pagePath: t,
                pageOrigin: i
            } = t;
            return i === e && t === n;
        });
        return t[i];
    }
    async function r(t) {
        abtiClient.distributedGroup = await (await l("GET", "/abti/users/configuration")).distributedGroup, 
        abtiClient.testConfiguration = await (async t => (t = t.map(t => (console.log(t), 
        l("GET", "/abti/tests/" + t))), (t = await Promise.allSettled(t)).map(t => t.value)))(t);
    }
    async function s(t, i) {
        return l("PATCH", `/abti/tests/${t}/specimen-statistics`, {
            groupName: abtiClient.distributedGroup,
            action: i
        });
    }
    async function l(t, i, e) {
        return (await fetch("" + n + i, {
            method: t,
            credentials: "include",
            headers: {
                "Access-Control-Allow-Origin": window.origin,
                "Content-type": "application/json"
            },
            body: e ? JSON.stringify(e) : null
        })).json();
    }
    history.pushState = function(...t) {
        i.apply(this, t), a();
    }, history.replaceState = function(...t) {
        e.apply(this, t), a();
    };
}